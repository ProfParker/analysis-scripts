function erp_32channels(data,data2)% function erp_32channels%% Displays as waves 32 channels of ERP data recorded using an Electrocap,% realistically distributed across the scalp.%% The function is currently set to always take as input two 32xN matrices, where N corresponds% to the number of time slices in the waveforms.clf;% The function allows the user to specify a number of parameters of the data that is displayed.% These parameters can be set by editing the following lines.prestim = 100; 			% enter here the length of the prestimulus baseline, in millisecondspoststim = 1000;		% enter here the length of the poststimulus interval, in millisecondstickinterval = 200;		% enter here the interval between axis tick marks, in milliseconds% Currently the vertical scale for plotting ERP waveforms is fixed to a range that is appropriate for most studies.% However, this may need to be changed for some datasets.%% The electrode labels on individual subplots are currently set to be extremely small. This setting was chosen% in order to obtain optimal output when the figure is output to an .eps file and then opened in Adobe% Illustrator, which seemed to be expanding the labels. If you find that the labels are not expanded when you output% to a different graphics program, then you may want to edit the 'fontsize' values below.% There should be no need to edit below this linestimonset = prestim/(prestim + poststim);tickcount = floor(poststim/tickinterval);millisecond = 1/(prestim + poststim);channellabel = ['  O2' ; '  O1'; '  OZ'; '  PZ'; '  P4'; ' CP4'; '  P8'; '  C4'; ' TP8'; '  T8'; '  P7'; '  P3'; ' CP3'; ' CPZ'; '  CZ'; ' FC4'; ' FT8'; ' TP7'; '  C3'; ' FCZ'; '  FZ'; '  F4'; '  F8'; '  T7';  ' FT7'; ' FC3'; '  F3';   ' FP2'; '  F7'; ' FP1'; 'HEOG'; 'VEOG'];sensorposition = [ 1.0000    5.3000    3.4000;    2.0000    8.2000    3.4000;    3.0000    6.6000    3.7500;    4.0000    6.6000    4.8500;    5.0000    8.3000    4.6500;    6.0000    8.7500    5.7500;    7.0000    9.9500    4.4500;    8.0000    8.7000    6.9000;    9.0000    9.9500    5.7500;   10.0000   10.5500    6.9000;   11.0000    3.3000    4.4500;   12.0000    4.9500    4.6500;   13.0000    4.4500    5.7500;   14.0000    6.6000    6.0000;   15.0000    6.6000    7.1000;   16.0000    8.5500    8.1000;   17.0000   10.1000    8.1500;   18.0000    3.2500    5.7500;   19.0000    4.4500    6.9000;   20.0000    6.6000    8.2000;   21.0000    6.6000    9.4000;   22.0000    8.5500    9.2500;   23.0000   10.2500    9.5000;   24.0000    2.6000    6.9000;   25.0000    3.2000    8.1500;   26.0000    4.6500    8.1000;   27.0000    4.6500    9.2500;   28.0000    7.9000   10.2500;   29.0000    3.1000    9.5000;   30.0000    5.2500   10.2500;   31.0000   11.9500   10.3500;   32.0000    1.4000   10.3500];% The following lines define axis properties and the range of the datataxis = linspace(0,1,size(data,2)); % creates an axis of length 1, with as many segments as there are in each row of datarange = abs(max(data) - min(data));% The following lines plot the ERP waveforms (voltage values are divided by a factor of 10, to fit the screen).hold on;for k = 1:32	h = plot(sensorposition(k,2)+taxis, sensorposition(k,3)+data(k,:)./-10, 'b');	h2 = plot(sensorposition(k,2)+taxis, sensorposition(k,3)+data2(k,:)./-10, 'r');% The following lines define the position of the channel numbers relative to the axes - longer numbers must be positioned% farther from the axes.	if k < 31		text(sensorposition(k,2)-0.4, sensorposition(k,3)+0.3, char(channellabel(k,:)),'fontsize',6);	else		text(sensorposition(k,2) - 0.55, sensorposition(k,3)+0.3, char(channellabel(k,:)),'fontsize',6);	end	% The next lines define the position of tick marks on axes. Adjusted to handle varying epoch lengths. Ticks are inserted at 200ms intervals.line([sensorposition(k,2), sensorposition(k,2)+1], [sensorposition(k,3), sensorposition(k,3)],'color', 'k' );   % horizontal axis	line([sensorposition(k,2)+stimonset, sensorposition(k,2)+stimonset], [sensorposition(k,3)-0.3,sensorposition(k,3)+0.3],'color','k'); % vertical axis	line([sensorposition(k,2), sensorposition(k,2)], [sensorposition(k,3)-0.05,sensorposition(k,3)+0.05],'color','k'); % prestim tick mark	for j = 1:tickcount	line([sensorposition(k,2)+(stimonset+(j*tickinterval*millisecond)), sensorposition(k,2)+(stimonset+(j*tickinterval*millisecond))], [sensorposition(k,3)-0.05,sensorposition(k,3)+0.05],'color','k');	end	line([sensorposition(k,2)+(stimonset-0.05), sensorposition(k,2)+(stimonset+0.05)], [sensorposition(k,3)+0.3,sensorposition(k,3)+0.3],'color', 'k');	line([sensorposition(k,2)+(stimonset-0.05), sensorposition(k,2)+(stimonset+0.05)], [sensorposition(k,3)-0.3,sensorposition(k,3)-0.3],'color', 'k');end% The next lines define the scale axisline([11.5 12.5], [3.5 3.5],'color','k'); % horizontal axisfor j = 1:tickcount	line([11.5+(stimonset+(j*tickinterval*millisecond)),11.5+(stimonset+(j*tickinterval*millisecond))], [3.5-0.05,3.5+0.05],'color','k'); % vertical tick marksendline([11.5+stimonset,11.5+stimonset], [3.5-0.3, 3.5+0.3],'color','k');line([11.5,11.5], [3.5-0.05,3.5+0.05],'color','k');line([11.5+stimonset-0.05,11.5+stimonset+0.05], [3.5+0.3, 3.5+0.3],'color','k');line([11.5+stimonset-0.05, 11.5+stimonset+0.05], [3.5-0.3,3.5-0.3],'color','k');text(11.1,3.2,'3 \muV','fontsize',6);text(11.05,3.8,'-3 \muV','fontsize',6);text(12.4,3.3,strcat(int2str(poststim),'ms'),'fontsize',6);% The next lines define the legendline([7 8], [-5.5 -5.5],'color','b');line([7 8], [-6 -6], 'color', 'r');text(8.1, -5.5, 'Series 1','Fontsize', 10);text(8.1, -6, 'Series 2','Fontsize', 10);% The next lines turn off the main axis backgroundhold off;axis('off');axis([1 13 2 12]);